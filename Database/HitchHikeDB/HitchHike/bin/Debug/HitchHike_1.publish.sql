/*
Deployment script for HitchHike_Test

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "HitchHike_Test"
:setvar DefaultFilePrefix "HitchHike_Test"
:setvar DefaultDataPath "e:\MSSQL11.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "e:\MSSQL11.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[CheckUsernameAvailability]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[CheckUsernameAvailability]
	(
		@Username		NVARCHAR(50),
		@RecordCount	INT OUTPUT
	)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	SET @RecordCount = 0;

    SELECT @RecordCount = COUNT(*)
	FROM dbo.[User]
	WHERE Username = @Username

END
GO
PRINT N'Creating [dbo].[GetAuthenticatedUser]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetAuthenticatedUser]
(
	@Username NVARCHAR(50),
	@Password NVARCHAR(20)
)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    SELECT 
		UserIdentityId	AS UserId,
		Username,
		Firstname,
		Lastname,
		UG.GId			AS Gender
	FROM 
		dbo.[User] U
		INNER JOIN dbo.[UserGender] UG
		ON U.Gender = UG.GCode
	WHERE Username = @Username AND [Password] = @Password 
END
GO
PRINT N'Creating [dbo].[GetUsers]...';


GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
CREATE PROCEDURE [dbo].[GetUsers]
	-- Add the parameters for the stored procedure here
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT 
		UserIdentityId			AS UserId,
		Username,
		Firstname,
		Lastname,
		Gender,
		EmailAddress
	FROM dbo.[User]
END
GO
PRINT N'Creating [dbo].[InsertUserDetails]...';


GO
CREATE PROCEDURE [dbo].[InsertUserDetails]
(
	@Username				NVARCHAR(50),
	@Firstname				NVARCHAR(20), 
	@Lastname				NVARCHAR(20),
	@Gender					CHAR(1),
	@Password				NVARCHAR(30),
	@PrimaryEmailAddress	NVARCHAR(50),
	@ContactNumber			NVARCHAR(15)
)	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	INSERT INTO dbo.[User]
	(
		Username,
		Firstname, 
		Lastname,
		Gender,
		[Password],
		EmailAddress,
		ContactNumber
	)
	SELECT 
		@Username,
		@Firstname, 
		@Lastname,
		@Gender,
		@Password,
		@PrimaryEmailAddress,
		@ContactNumber			

END
GO
PRINT N'Update complete.'
GO
